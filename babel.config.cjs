// @ts-check
'use strict';

const { deepMergeConfig } = require('@-xun/symbiote/assets');

const {
  assertEnvironment,
  moduleExport
} = require('@-xun/symbiote/assets/babel.config.cjs');

const { createDebugLogger } = require('rejoinder');

const debug = createDebugLogger({ namespace: 'symbiote:config:babel' });

// ? Next.js-specific Babel settings
const nextBabelPreset = [
  'next/babel',
  {
    'preset-env': {
      targets: 'defaults',

      // ? If users import all core-js they're probably not concerned with
      // ? bundle size. We shouldn't rely on magic to try and shrink it.
      useBuiltIns: false,

      // ? Do not transform modules to CJS
      // ! MUST BE FALSE (see: https://nextjs.org/docs/#customizing-babel-config)
      modules: false,

      // ? Exclude transforms that make all code slower
      exclude: ['transform-typeof-symbol']
    },
    'preset-typescript': {
      allowDeclareFields: true
    },
    'preset-react': {
      runtime: 'automatic',
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      development: !process.env.NODE_ENV?.startsWith('production')
    }
  }
];

/** @type{any} */
const config = deepMergeConfig(
  moduleExport({
    derivedAliases: getBabelAliases(),
    ...assertEnvironment({ projectRoot: __dirname })
  }),
  {
    // Any custom configs here will be deep merged with moduleExport's result
    // You may wish to enable explicit exports references for improved testing
    // DX, but be aware that it is currently a wee buggy as of 5/2025 (fix it!)
    //
    env: {
      test: {
        plugins: ['babel-plugin-explicit-exports-references']
      }
    }
  }
);

// * Used by Vercel, `npm start`, and `npm run build`
config.env.production = {
  // ? Source maps are handled by Next.js and Webpack
  presets: [nextBabelPreset]
  // ? Minification is handled by Webpack
};

// * Used by `npm run dev`; is also the default environment
config.env.development = {
  // ? Source maps are handled by Next.js and Webpack
  presets: [nextBabelPreset]
  // ? We don't care about minification
};

module.exports = config;
debug('exported config: %O', module.exports);

function getBabelAliases() {
  // ! These aliases are auto-generated by symbiote. Instead of modifying them
  // ! directly, consider regenerating aliases across the entire project with:
  // ! `npx symbiote project renovate --regenerate-assets --assets-preset ...`
  return {
    '^multiverse\\+backend:(.+)$': './packages/backend/src/$1',
    '^multiverse\\+shared:(.+)$': './packages/shared/src/$1',
    '^multiverse\\+backend$': './packages/backend/src/index.js',
    '^multiverse\\+shared$': './packages/shared/src/index.js',
    '^universe\\+backend:(.+)$': './packages/backend/src/$1',
    '^universe\\+shared:(.+)$': './packages/shared/src/$1',
    '^universe\\+backend$': './packages/backend/src/index.js',
    '^universe\\+shared$': './packages/shared/src/index.js',
    '^universe:(.+)$': './src/$1',
    '^universe$': './src/index.js',
    '^testverse\\+backend:(.+)$': './packages/backend/test/$1',
    '^testverse\\+shared:(.+)$': './packages/shared/test/$1',
    '^testverse:(.+)$': './test/$1',
    '^typeverse:(.+)$': './types/$1',
    '^rootverse\\+backend:(.+)$': './packages/backend/$1',
    '^rootverse\\+shared:(.+)$': './packages/shared/$1',
    '^rootverse:(.+)$': './$1'
  };
}
